{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  } //получить ответ\n\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  } //получаем данные пользователя\n\n\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } //получаем массив карточек\n\n\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } //метод добавления карточки\n\n\n  addNewCard(newCard) {\n    return fetch(this._baseUrl + '/cards/', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newCard.name,\n        link: newCard.link\n      })\n    }).then(this._handleResponse);\n  } //метод удаления карточки\n\n\n  deleteCard(cardId) {\n    return fetch(this._baseUrl + '/cards/' + `${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } //редактирование данных профайла\n\n\n  patchUserInfo(userInfo) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userInfo.firstname,\n        about: userInfo.about\n      })\n    }).then(this._handleResponse);\n  } //редактирование аватара\n\n\n  setUserAvatar(userInfo) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userInfo.avatar\n      })\n    }).then(this._handleResponse);\n  } //поставить лайк\n\n\n  handleLikeCard(cardId) {\n    return fetch(this._baseUrl + '/cards/likes/' + `${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } //убрать лайк\n\n\n  handleDislikeCard(cardId) {\n    return fetch(this._baseUrl + '/cards/likes/' + `${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-42',\n  headers: {\n    authorization: 'e5a37e81-cb9a-4a0e-bacc-f2b0bcf5bc25',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_handleResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","getInitialCards","addNewCard","newCard","body","JSON","stringify","name","link","deleteCard","cardId","patchUserInfo","userInfo","firstname","about","setUserAvatar","avatar","handleLikeCard","handleDislikeCard","api","authorization"],"sources":["/Users/Administrator/dev/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  //получить ответ\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //получаем данные пользователя\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'GET',\n      headers: this._headers,\n    }).then(this._handleResponse);\n  }\n\n  //получаем массив карточек\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'GET',\n      headers: this._headers,\n    }).then(this._handleResponse);\n  }\n\n  //метод добавления карточки\n  addNewCard(newCard) {\n    return fetch(this._baseUrl + '/cards/', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newCard.name,\n        link: newCard.link,\n      }),\n    }).then(this._handleResponse);\n  }\n\n  //метод удаления карточки\n  deleteCard(cardId) {\n    return fetch(this._baseUrl + '/cards/' + `${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then(this._handleResponse);\n  }\n\n  //редактирование данных профайла\n  patchUserInfo(userInfo) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userInfo.firstname,\n        about: userInfo.about,\n      }),\n    }).then(this._handleResponse);\n  }\n\n  //редактирование аватара\n  setUserAvatar(userInfo) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userInfo.avatar,\n      }),\n    }).then(this._handleResponse);\n  }\n\n  //поставить лайк\n  handleLikeCard(cardId) {\n    return fetch(this._baseUrl + '/cards/likes/' + `${cardId}`, {\n      method: 'PUT',\n      headers: this._headers,\n    }).then(this._handleResponse);\n  }\n\n  //убрать лайк\n  handleDislikeCard(cardId) {\n    return fetch(this._baseUrl + '/cards/likes/' + `${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then(this._handleResponse);\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-42',\n  headers: {\n    authorization: 'e5a37e81-cb9a-4a0e-bacc-f2b0bcf5bc25',\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}